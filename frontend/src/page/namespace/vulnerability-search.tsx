'use client'
import * as React from 'react'
import {
    AlertCircle,
    Archive,
    Boxes,
    FileText,
    MessagesSquare,
    Search,
    ShieldCheck,
    ShoppingCart,
    Users2,
} from 'lucide-react'

import { AccountSwitcher } from './nav/account-switcher'
import { Nav } from './nav/nav'
import { cn } from '../../lib/utils'
import { Separator } from '../../component/ui/separator'
import { Tabs } from '../../component/ui/tabs'
import { TooltipProvider } from '../../component/ui/tooltip'

import { GripVertical } from 'lucide-react'
import * as ResizablePrimitive from 'react-resizable-panels'
import { Button } from '../../component/ui/button'
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from '../../component/ui/dropdown-menu'

import { accounts } from './nav/data'
import { useToast } from '../../component/ui/use-toast'
import { ToastAction } from '../../component/ui/toast'
import SearchingPage from '../../component/table/page-search'

import { CaretSortIcon, CheckIcon } from '@radix-ui/react-icons'

import {
    Command,
    CommandEmpty,
    CommandGroup,
    CommandInput,
    CommandItem,
} from '../../component/ui/command'
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from '../../component/ui/popover'
import { ecosystems } from '../../data/helper'
import { LibraryUI } from '../../model/library'
import { dependencies } from '../../data/dependencies'
import { AutoComplete } from '../../component/table/components/autocomplete'

const ResizablePanelGroup = ({
    className,
    ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
    <ResizablePrimitive.PanelGroup
        className={cn(
            'flex h-full w-full data-[panel-group-direction=vertical]:flex-col',
            className
        )}
        {...props}
    />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
    withHandle,
    className,
    ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
    withHandle?: boolean
}) => (
    <ResizablePrimitive.PanelResizeHandle
        className={cn(
            'relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90',
            className
        )}
        {...props}
    >
        {withHandle && (
            <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
                <GripVertical className="h-2.5 w-2.5" />
            </div>
        )}
    </ResizablePrimitive.PanelResizeHandle>
)

export function SearchingScan() {
    const defaultLayout = [0, 100]
    const defaultCollapsed = true
    const navCollapsedSize = 4
    const [isCollapsed, setIsCollapsed] = React.useState(defaultCollapsed)
    const { toast } = useToast()
    const [nameValue, setNameValue] = React.useState<string>('')
    const [openEcosystem, setOpenEcosystem] = React.useState(false)
    const [valueEcosystem, setValueEcosystem] = React.useState('')
    const [disabled, setDisabled] = React.useState(true)
    const [isSearch, setIsSearch] = React.useState(false)

    const libs: LibraryUI[] = dependencies.map((dep) => ({
        name: dep.name,
        version: dep.version,
        ecosystem: dep.ecosystem,
    }))

    const handlingToastAction = (title: string, description: string) => {
        toast({
            title,
            description,
            action: <ToastAction altText="Hide">Hide</ToastAction>,
        })
    }

    const handlingSearch = (search: boolean) => {
        setIsSearch(search)
    }

    const handlingFormat = (format: string) => {
        console.log(format)
    }

    return (
        <TooltipProvider delayDuration={0}>
            <ResizablePanelGroup
                direction="horizontal"
                onLayout={(sizes: number[]) => {
                    document.cookie = `react-resizable-panels:layout=${JSON.stringify(
                        sizes
                    )}`
                }}
                className="h-full min-h-[800px] max-h-[800px] items-stretch"
            >
                <ResizablePanel
                    defaultSize={defaultLayout[0]}
                    collapsedSize={navCollapsedSize}
                    collapsible={true}
                    minSize={0}
                    maxSize={0}
                    className={cn(
                        isCollapsed &&
                            'min-w-[50px] transition-all duration-300 ease-in-out'
                    )}
                >
                    <div
                        className={cn(
                            'flex h-[52px] items-center justify-center',
                            isCollapsed ? 'h-[52px]' : 'px-2'
                        )}
                    >
                        <AccountSwitcher
                            isCollapsed={isCollapsed}
                            accounts={accounts}
                        />
                    </div>
                    <Separator />
                    <Nav
                        isCollapsed={isCollapsed}
                        links={[
                            {
                                title: 'Vulnerability Scanning',
                                href: '/namespace',
                                icon: ShieldCheck,
                                variant: 'ghost',
                            },
                            {
                                title: 'Vulnerability Searching',
                                href: '/search',
                                icon: Search,
                                variant: 'default',
                            },
                            {
                                title: 'SBOM',
                                href: '/sbom',
                                icon: Boxes,
                                variant: 'ghost',
                            },
                        ]}
                    />
                    <Separator />
                    <Nav
                        isCollapsed={isCollapsed}
                        links={[
                            {
                                title: 'Social',
                                label: '972',
                                icon: Users2,
                                variant: 'ghost',
                            },
                            {
                                title: 'Updates',
                                label: '342',
                                icon: AlertCircle,
                                variant: 'ghost',
                            },
                            {
                                title: 'Forums',
                                label: '128',
                                icon: MessagesSquare,
                                variant: 'ghost',
                            },
                            {
                                title: 'Shopping',
                                label: '8',
                                icon: ShoppingCart,
                                variant: 'ghost',
                            },
                            {
                                title: 'Promotions',
                                label: '21',
                                icon: Archive,
                                variant: 'ghost',
                            },
                        ]}
                    />
                </ResizablePanel>
                <ResizableHandle withHandle />
                <ResizablePanel defaultSize={defaultLayout[1]} minSize={30}>
                    <Tabs defaultValue="all" className="relative z-10">
                        <div className="flex h-[52px] justify-between items-center px-4 py-2 z-1">
                            <h1 className="text-xl font-bold">
                                Vulnerability Searching
                            </h1>
                            <div className="flex items-center p-2">
                                <div className="flex items-center gap-2"></div>
                                <Separator
                                    orientation="vertical"
                                    className="mx-2 h-6"
                                />
                                <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                        <Button variant="ghost" size="icon">
                                            <FileText className="h-4 w-4" />
                                            <span className="sr-only">
                                                Export scan data
                                            </span>
                                        </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                        <DropdownMenuItem
                                            onClick={() => {
                                                handlingFormat('pdf')
                                                handlingToastAction(
                                                    'Report Processing',
                                                    'This action can take some minutes'
                                                )
                                            }}
                                        >
                                            PDF
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => {
                                                handlingFormat('csv')
                                                handlingToastAction(
                                                    'Report Processing',
                                                    'This action can take some minutes'
                                                )
                                            }}
                                        >
                                            CSV
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => {
                                                handlingFormat('json')
                                                handlingToastAction(
                                                    'Report Processing',
                                                    'This action can take some minutes'
                                                )
                                            }}
                                        >
                                            JSON
                                        </DropdownMenuItem>
                                    </DropdownMenuContent>
                                </DropdownMenu>
                            </div>
                        </div>
                        <Separator />
                        <div className="bg-background/95 p-4 backdrop-blur supports-[backdrop-filter]:bg-background/60">
                            <form>
                                <div className="vulnerability-scan-form flex justify-between items-center">
                                    <div className="vulnerability-scan-form-left relative w-full z-10">
                                        <AutoComplete
                                            setNameValue={setNameValue}
                                            options={libs.map(
                                                (lib) =>
                                                    `${lib.name}:${lib.version}`
                                            )}
                                            emptyMessage="No library found."
                                            placeholder="<Package Name>:<Version>"
                                            disabled={disabled}
                                        />
                                    </div>
                                    <div className="vulnerability-scan-form-right flex items-center px-2">
                                        <Popover
                                            open={openEcosystem}
                                            onOpenChange={setOpenEcosystem}
                                        >
                                            <PopoverTrigger asChild>
                                                <Button
                                                    variant="outline"
                                                    role="combobox"
                                                    aria-expanded={
                                                        openEcosystem
                                                    }
                                                    className="w-[300px] justify-between"
                                                >
                                                    {valueEcosystem
                                                        ? ecosystems.find(
                                                              (ecosystem) =>
                                                                  ecosystem.value.toLowerCase() ===
                                                                  valueEcosystem.toLowerCase()
                                                          )?.label
                                                        : 'Select ecosystem'}
                                                    <CaretSortIcon className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                                                </Button>
                                            </PopoverTrigger>
                                            <PopoverContent className="w-[300px] p-0">
                                                <Command>
                                                    <CommandInput
                                                        placeholder="Search ecosystem"
                                                        className="h-9"
                                                    />
                                                    <CommandEmpty>
                                                        No ecosystem found.
                                                    </CommandEmpty>
                                                    <CommandGroup>
                                                        {ecosystems.map(
                                                            (ecosystem) => (
                                                                <CommandItem
                                                                    key={
                                                                        ecosystem.value
                                                                    }
                                                                    value={
                                                                        ecosystem.value
                                                                    }
                                                                    onSelect={(
                                                                        currentValue
                                                                    ) => {
                                                                        setValueEcosystem(
                                                                            currentValue ===
                                                                                valueEcosystem
                                                                                ? ''
                                                                                : currentValue
                                                                        )
                                                                        setDisabled(
                                                                            false
                                                                        )
                                                                        setOpenEcosystem(
                                                                            false
                                                                        )
                                                                    }}
                                                                >
                                                                    {
                                                                        ecosystem.label
                                                                    }
                                                                    <CheckIcon
                                                                        className={cn(
                                                                            'ml-auto h-4 w-4',
                                                                            valueEcosystem ===
                                                                                ecosystem.value
                                                                                ? 'opacity-100'
                                                                                : 'opacity-0'
                                                                        )}
                                                                    />
                                                                </CommandItem>
                                                            )
                                                        )}
                                                    </CommandGroup>
                                                </Command>
                                            </PopoverContent>
                                        </Popover>
                                    </div>
                                    <div className="vulnerability-scan-form-right flex items-center">
                                        <Button
                                            onClick={(e) => {
                                                e.preventDefault()
                                                handlingSearch(true)
                                                handlingToastAction(
                                                    'Analysis Processing',
                                                    'This action can take some minutes'
                                                )
                                            }}
                                        >
                                            OK
                                        </Button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </Tabs>
                    <SearchingPage
                        name={nameValue}
                        ecosystem={valueEcosystem}
                        isSearch={isSearch}
                        setIsSearch={setIsSearch}
                    />
                </ResizablePanel>
            </ResizablePanelGroup>
        </TooltipProvider>
    )
}
