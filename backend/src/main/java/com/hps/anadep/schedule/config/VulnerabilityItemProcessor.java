//package com.hps.osvscanning.schedule.config;
//
//import com.hps.osvscanning.model.LibraryEcosystem;
//import com.hps.osvscanning.model.enums.RangeType;
//import com.hps.osvscanning.model.mongo.MavenEcosystem;
//import com.hps.osvscanning.model.osv.Affected;
//import com.hps.osvscanning.model.osv.Range;
//import com.hps.osvscanning.model.osv.Vulnerability;
//import com.hps.osvscanning.model.osv.VulnerabilityOSVResponse;
//import com.hps.osvscanning.schedule.repository.MavenRepository;
//import lombok.extern.slf4j.Slf4j;
//import org.springframework.batch.item.ItemProcessor;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.util.CollectionUtils;
//import org.springframework.util.StringUtils;
//
//import java.util.ArrayList;
//import java.util.List;
//
//@Slf4j
//public class VulnerabilityItemProcessor implements ItemProcessor<Vulnerability, Vulnerability> {
////    @Autowired
////    private MavenRepository mavenRepository;
////
////    private final static String RANGE_VERSION_FORMAT = "[%s,%s)";
//
//    @Override
//    public Vulnerability process(Vulnerability item) throws Exception {
////        try {
////            for (Affected affected : item.getAffected()) {
////                Range firstRange = CollectionUtils.isEmpty(affected.getRanges()) ? new Range() : affected.getRanges().get(0);
////                RangeType rangeType = RangeType.getRangeType(firstRange.getType());
////                if (rangeType.equals(RangeType.ECOSYSTEM)) {
////                    LibraryEcosystem libraryEcosystem = affected.getLibraryEcosystem();
////                    List<String> versions = affected.getVersions();
////                    for (String version : versions) {
////                        MavenEcosystem mavenEcosystem = mavenRepository.findCommonEcosystemByNameAndEcosystemAndTypeAndVersion(libraryEcosystem.getName(), libraryEcosystem.getEcosystem(), RangeType.ECOSYSTEM.name(), version);
////                        if (mavenEcosystem == null) {
////                            mavenEcosystem = generateMavenEcosystem(libraryEcosystem, version, item);
////                        } else {
////                            updateMavenEcosystem(mavenEcosystem, item);
////                        }
////                        mavenRepository.save(mavenEcosystem);
////                    }
////                } else {
////                    LibraryEcosystem libraryEcosystem = affected.getLibraryEcosystem();
////                    for (Range range : affected.getRanges()) {
////                        if (!StringUtils.hasText(range.getEvents().get(0).getIntroduced()) || !StringUtils.hasText(range.getEvents().get(1).getFixed())) {
////                            continue;
////                        }
////                        String version = String.format(RANGE_VERSION_FORMAT, range.getEvents().get(0).getIntroduced(), range.getEvents().get(1).getFixed());
////                        MavenEcosystem mavenEcosystem = mavenRepository.findCommonEcosystemByNameAndEcosystemAndTypeAndVersion(libraryEcosystem.getName(), libraryEcosystem.getEcosystem(), RangeType.ECOSYSTEM.name(), version);
////                        if (mavenEcosystem == null) {
////                            mavenEcosystem = generateMavenEcosystem(libraryEcosystem, version, item);
////                        } else {
////                            updateMavenEcosystem(mavenEcosystem, item);
////                        }
////                        mavenRepository.save(mavenEcosystem);
////                    }
////                }
////            }
////        } catch (Exception exception) {
////            log.error("Processing error: {}", exception.getMessage());
////            throw new RuntimeException(exception);
////        }
//        log.error("Processing error: {}", "test");
////        throw new RuntimeException("test");
//        return item;
//    }
//
//    private void updateMavenEcosystem(MavenEcosystem mavenEcosystem, Vulnerability vuln) {
//        VulnerabilityOSVResponse osvResponse = mavenEcosystem.getData();
//        List<Vulnerability> vulns = osvResponse.getVulns();
//        boolean isReplace = false;
//        for(int i=0;i< vulns.size();i++) {
//            if (vulns.get(i).getId().equals(vuln.getId())) {
//                vulns.set(i, vuln);
//                isReplace = true;
//                break;
//            }
//        }
//        if (!isReplace) {
//            vulns.add(vuln);
//        }
//        osvResponse.setVulns(vulns);
//        mavenEcosystem.setData(osvResponse);
//        log.info("Updating to cloud: {}", mavenEcosystem);
//    }
//
//    private MavenEcosystem generateMavenEcosystem(LibraryEcosystem libraryEcosystem, String version, Vulnerability vuln) {
//        List<Vulnerability> vulns = new ArrayList<>();
//        vulns.add(vuln);
//        VulnerabilityOSVResponse osvResponse = new VulnerabilityOSVResponse(vulns);
//        MavenEcosystem mavenEcosystem = new MavenEcosystem(libraryEcosystem.getName(), libraryEcosystem.getEcosystem(), RangeType.ECOSYSTEM.name(), version, osvResponse);
//        log.info("Inserting to cloud: {}", mavenEcosystem);
//        return mavenEcosystem;
//    }
//}
